// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  guest: (where?: GuestWhereInput) => Promise<boolean>;
  guestContact: (where?: GuestContactWhereInput) => Promise<boolean>;
  guestPersonal: (where?: GuestPersonalWhereInput) => Promise<boolean>;
  guestResponse: (where?: GuestResponseWhereInput) => Promise<boolean>;
  guestRsvp: (where?: GuestRsvpWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  guest: (where: GuestWhereUniqueInput) => GuestNullablePromise;
  guests: (args?: {
    where?: GuestWhereInput;
    orderBy?: GuestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Guest>;
  guestsConnection: (args?: {
    where?: GuestWhereInput;
    orderBy?: GuestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GuestConnectionPromise;
  guestContact: (
    where: GuestContactWhereUniqueInput
  ) => GuestContactNullablePromise;
  guestContacts: (args?: {
    where?: GuestContactWhereInput;
    orderBy?: GuestContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GuestContact>;
  guestContactsConnection: (args?: {
    where?: GuestContactWhereInput;
    orderBy?: GuestContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GuestContactConnectionPromise;
  guestPersonal: (
    where: GuestPersonalWhereUniqueInput
  ) => GuestPersonalNullablePromise;
  guestPersonals: (args?: {
    where?: GuestPersonalWhereInput;
    orderBy?: GuestPersonalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GuestPersonal>;
  guestPersonalsConnection: (args?: {
    where?: GuestPersonalWhereInput;
    orderBy?: GuestPersonalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GuestPersonalConnectionPromise;
  guestResponse: (
    where: GuestResponseWhereUniqueInput
  ) => GuestResponseNullablePromise;
  guestResponses: (args?: {
    where?: GuestResponseWhereInput;
    orderBy?: GuestResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GuestResponse>;
  guestResponsesConnection: (args?: {
    where?: GuestResponseWhereInput;
    orderBy?: GuestResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GuestResponseConnectionPromise;
  guestRsvp: (where: GuestRsvpWhereUniqueInput) => GuestRsvpNullablePromise;
  guestRsvps: (args?: {
    where?: GuestRsvpWhereInput;
    orderBy?: GuestRsvpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GuestRsvp>;
  guestRsvpsConnection: (args?: {
    where?: GuestRsvpWhereInput;
    orderBy?: GuestRsvpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GuestRsvpConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGuest: (data: GuestCreateInput) => GuestPromise;
  updateGuest: (args: {
    data: GuestUpdateInput;
    where: GuestWhereUniqueInput;
  }) => GuestPromise;
  upsertGuest: (args: {
    where: GuestWhereUniqueInput;
    create: GuestCreateInput;
    update: GuestUpdateInput;
  }) => GuestPromise;
  deleteGuest: (where: GuestWhereUniqueInput) => GuestPromise;
  deleteManyGuests: (where?: GuestWhereInput) => BatchPayloadPromise;
  createGuestContact: (data: GuestContactCreateInput) => GuestContactPromise;
  updateGuestContact: (args: {
    data: GuestContactUpdateInput;
    where: GuestContactWhereUniqueInput;
  }) => GuestContactPromise;
  updateManyGuestContacts: (args: {
    data: GuestContactUpdateManyMutationInput;
    where?: GuestContactWhereInput;
  }) => BatchPayloadPromise;
  upsertGuestContact: (args: {
    where: GuestContactWhereUniqueInput;
    create: GuestContactCreateInput;
    update: GuestContactUpdateInput;
  }) => GuestContactPromise;
  deleteGuestContact: (
    where: GuestContactWhereUniqueInput
  ) => GuestContactPromise;
  deleteManyGuestContacts: (
    where?: GuestContactWhereInput
  ) => BatchPayloadPromise;
  createGuestPersonal: (data: GuestPersonalCreateInput) => GuestPersonalPromise;
  updateGuestPersonal: (args: {
    data: GuestPersonalUpdateInput;
    where: GuestPersonalWhereUniqueInput;
  }) => GuestPersonalPromise;
  updateManyGuestPersonals: (args: {
    data: GuestPersonalUpdateManyMutationInput;
    where?: GuestPersonalWhereInput;
  }) => BatchPayloadPromise;
  upsertGuestPersonal: (args: {
    where: GuestPersonalWhereUniqueInput;
    create: GuestPersonalCreateInput;
    update: GuestPersonalUpdateInput;
  }) => GuestPersonalPromise;
  deleteGuestPersonal: (
    where: GuestPersonalWhereUniqueInput
  ) => GuestPersonalPromise;
  deleteManyGuestPersonals: (
    where?: GuestPersonalWhereInput
  ) => BatchPayloadPromise;
  createGuestResponse: (data: GuestResponseCreateInput) => GuestResponsePromise;
  updateGuestResponse: (args: {
    data: GuestResponseUpdateInput;
    where: GuestResponseWhereUniqueInput;
  }) => GuestResponsePromise;
  updateManyGuestResponses: (args: {
    data: GuestResponseUpdateManyMutationInput;
    where?: GuestResponseWhereInput;
  }) => BatchPayloadPromise;
  upsertGuestResponse: (args: {
    where: GuestResponseWhereUniqueInput;
    create: GuestResponseCreateInput;
    update: GuestResponseUpdateInput;
  }) => GuestResponsePromise;
  deleteGuestResponse: (
    where: GuestResponseWhereUniqueInput
  ) => GuestResponsePromise;
  deleteManyGuestResponses: (
    where?: GuestResponseWhereInput
  ) => BatchPayloadPromise;
  createGuestRsvp: (data: GuestRsvpCreateInput) => GuestRsvpPromise;
  updateGuestRsvp: (args: {
    data: GuestRsvpUpdateInput;
    where: GuestRsvpWhereUniqueInput;
  }) => GuestRsvpPromise;
  updateManyGuestRsvps: (args: {
    data: GuestRsvpUpdateManyMutationInput;
    where?: GuestRsvpWhereInput;
  }) => BatchPayloadPromise;
  upsertGuestRsvp: (args: {
    where: GuestRsvpWhereUniqueInput;
    create: GuestRsvpCreateInput;
    update: GuestRsvpUpdateInput;
  }) => GuestRsvpPromise;
  deleteGuestRsvp: (where: GuestRsvpWhereUniqueInput) => GuestRsvpPromise;
  deleteManyGuestRsvps: (where?: GuestRsvpWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  guest: (
    where?: GuestSubscriptionWhereInput
  ) => GuestSubscriptionPayloadSubscription;
  guestContact: (
    where?: GuestContactSubscriptionWhereInput
  ) => GuestContactSubscriptionPayloadSubscription;
  guestPersonal: (
    where?: GuestPersonalSubscriptionWhereInput
  ) => GuestPersonalSubscriptionPayloadSubscription;
  guestResponse: (
    where?: GuestResponseSubscriptionWhereInput
  ) => GuestResponseSubscriptionPayloadSubscription;
  guestRsvp: (
    where?: GuestRsvpSubscriptionWhereInput
  ) => GuestRsvpSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GuestResponseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "attending_ASC"
  | "attending_DESC"
  | "comments_ASC"
  | "comments_DESC"
  | "dietary_ASC"
  | "dietary_DESC"
  | "name_ASC"
  | "name_DESC";

export type GuestOrderByInput = "id_ASC" | "id_DESC";

export type GuestContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "email_ASC"
  | "email_DESC";

export type GuestPersonalOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "greeting_ASC"
  | "greeting_DESC"
  | "nicknames_ASC"
  | "nicknames_DESC";

export type GuestRsvpOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "responded_ASC"
  | "responded_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GuestRsvpCreateOneInput {
  create?: Maybe<GuestRsvpCreateInput>;
  connect?: Maybe<GuestRsvpWhereUniqueInput>;
}

export type GuestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GuestResponseScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  attending?: Maybe<Boolean>;
  attending_not?: Maybe<Boolean>;
  comments?: Maybe<String>;
  comments_not?: Maybe<String>;
  comments_in?: Maybe<String[] | String>;
  comments_not_in?: Maybe<String[] | String>;
  comments_lt?: Maybe<String>;
  comments_lte?: Maybe<String>;
  comments_gt?: Maybe<String>;
  comments_gte?: Maybe<String>;
  comments_contains?: Maybe<String>;
  comments_not_contains?: Maybe<String>;
  comments_starts_with?: Maybe<String>;
  comments_not_starts_with?: Maybe<String>;
  comments_ends_with?: Maybe<String>;
  comments_not_ends_with?: Maybe<String>;
  dietary?: Maybe<String>;
  dietary_not?: Maybe<String>;
  dietary_in?: Maybe<String[] | String>;
  dietary_not_in?: Maybe<String[] | String>;
  dietary_lt?: Maybe<String>;
  dietary_lte?: Maybe<String>;
  dietary_gt?: Maybe<String>;
  dietary_gte?: Maybe<String>;
  dietary_contains?: Maybe<String>;
  dietary_not_contains?: Maybe<String>;
  dietary_starts_with?: Maybe<String>;
  dietary_not_starts_with?: Maybe<String>;
  dietary_ends_with?: Maybe<String>;
  dietary_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<GuestResponseScalarWhereInput[] | GuestResponseScalarWhereInput>;
  OR?: Maybe<GuestResponseScalarWhereInput[] | GuestResponseScalarWhereInput>;
  NOT?: Maybe<GuestResponseScalarWhereInput[] | GuestResponseScalarWhereInput>;
}

export interface GuestPersonalUpsertNestedInput {
  update: GuestPersonalUpdateDataInput;
  create: GuestPersonalCreateInput;
}

export interface GuestResponseUpsertWithWhereUniqueNestedInput {
  where: GuestResponseWhereUniqueInput;
  update: GuestResponseUpdateDataInput;
  create: GuestResponseCreateInput;
}

export interface GuestUpdateInput {
  contact?: Maybe<GuestContactUpdateOneRequiredInput>;
  personal?: Maybe<GuestPersonalUpdateOneRequiredInput>;
  rsvp?: Maybe<GuestRsvpUpdateOneRequiredInput>;
}

export type GuestRsvpWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface GuestResponseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GuestResponseWhereInput>;
  AND?: Maybe<
    GuestResponseSubscriptionWhereInput[] | GuestResponseSubscriptionWhereInput
  >;
  OR?: Maybe<
    GuestResponseSubscriptionWhereInput[] | GuestResponseSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GuestResponseSubscriptionWhereInput[] | GuestResponseSubscriptionWhereInput
  >;
}

export interface GuestResponseUpdateDataInput {
  attending?: Maybe<Boolean>;
  comments?: Maybe<String>;
  dietary?: Maybe<String>;
  name?: Maybe<String>;
}

export interface GuestContactWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<GuestContactWhereInput[] | GuestContactWhereInput>;
  OR?: Maybe<GuestContactWhereInput[] | GuestContactWhereInput>;
  NOT?: Maybe<GuestContactWhereInput[] | GuestContactWhereInput>;
}

export interface GuestResponseUpdateWithWhereUniqueNestedInput {
  where: GuestResponseWhereUniqueInput;
  data: GuestResponseUpdateDataInput;
}

export interface GuestRsvpWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  responded?: Maybe<Boolean>;
  responded_not?: Maybe<Boolean>;
  responses_every?: Maybe<GuestResponseWhereInput>;
  responses_some?: Maybe<GuestResponseWhereInput>;
  responses_none?: Maybe<GuestResponseWhereInput>;
  AND?: Maybe<GuestRsvpWhereInput[] | GuestRsvpWhereInput>;
  OR?: Maybe<GuestRsvpWhereInput[] | GuestRsvpWhereInput>;
  NOT?: Maybe<GuestRsvpWhereInput[] | GuestRsvpWhereInput>;
}

export interface GuestResponseUpdateManyInput {
  create?: Maybe<GuestResponseCreateInput[] | GuestResponseCreateInput>;
  update?: Maybe<
    | GuestResponseUpdateWithWhereUniqueNestedInput[]
    | GuestResponseUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | GuestResponseUpsertWithWhereUniqueNestedInput[]
    | GuestResponseUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    GuestResponseWhereUniqueInput[] | GuestResponseWhereUniqueInput
  >;
  connect?: Maybe<
    GuestResponseWhereUniqueInput[] | GuestResponseWhereUniqueInput
  >;
  set?: Maybe<GuestResponseWhereUniqueInput[] | GuestResponseWhereUniqueInput>;
  disconnect?: Maybe<
    GuestResponseWhereUniqueInput[] | GuestResponseWhereUniqueInput
  >;
  deleteMany?: Maybe<
    GuestResponseScalarWhereInput[] | GuestResponseScalarWhereInput
  >;
  updateMany?: Maybe<
    | GuestResponseUpdateManyWithWhereNestedInput[]
    | GuestResponseUpdateManyWithWhereNestedInput
  >;
}

export interface GuestContactSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GuestContactWhereInput>;
  AND?: Maybe<
    GuestContactSubscriptionWhereInput[] | GuestContactSubscriptionWhereInput
  >;
  OR?: Maybe<
    GuestContactSubscriptionWhereInput[] | GuestContactSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GuestContactSubscriptionWhereInput[] | GuestContactSubscriptionWhereInput
  >;
}

export interface GuestRsvpUpdateDataInput {
  date?: Maybe<String>;
  responded?: Maybe<Boolean>;
  responses?: Maybe<GuestResponseUpdateManyInput>;
}

export interface GuestRsvpUpdateManyMutationInput {
  date?: Maybe<String>;
  responded?: Maybe<Boolean>;
}

export type GuestContactWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface GuestResponseUpdateInput {
  attending?: Maybe<Boolean>;
  comments?: Maybe<String>;
  dietary?: Maybe<String>;
  name?: Maybe<String>;
}

export interface GuestCreateInput {
  id?: Maybe<ID_Input>;
  contact: GuestContactCreateOneInput;
  personal: GuestPersonalCreateOneInput;
  rsvp: GuestRsvpCreateOneInput;
}

export interface GuestPersonalUpdateInput {
  greeting?: Maybe<String>;
  nicknames?: Maybe<String>;
}

export interface GuestContactCreateOneInput {
  create?: Maybe<GuestContactCreateInput>;
  connect?: Maybe<GuestContactWhereUniqueInput>;
}

export interface GuestContactUpdateManyMutationInput {
  address?: Maybe<String>;
  email?: Maybe<String>;
}

export interface GuestContactCreateInput {
  id?: Maybe<Int>;
  address?: Maybe<String>;
  email: String;
}

export interface GuestRsvpUpsertNestedInput {
  update: GuestRsvpUpdateDataInput;
  create: GuestRsvpCreateInput;
}

export interface GuestPersonalCreateOneInput {
  create?: Maybe<GuestPersonalCreateInput>;
  connect?: Maybe<GuestPersonalWhereUniqueInput>;
}

export type GuestResponseWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface GuestPersonalCreateInput {
  id?: Maybe<Int>;
  greeting?: Maybe<String>;
  nicknames: String;
}

export interface GuestRsvpSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GuestRsvpWhereInput>;
  AND?: Maybe<
    GuestRsvpSubscriptionWhereInput[] | GuestRsvpSubscriptionWhereInput
  >;
  OR?: Maybe<
    GuestRsvpSubscriptionWhereInput[] | GuestRsvpSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GuestRsvpSubscriptionWhereInput[] | GuestRsvpSubscriptionWhereInput
  >;
}

export interface GuestRsvpUpdateOneRequiredInput {
  create?: Maybe<GuestRsvpCreateInput>;
  update?: Maybe<GuestRsvpUpdateDataInput>;
  upsert?: Maybe<GuestRsvpUpsertNestedInput>;
  connect?: Maybe<GuestRsvpWhereUniqueInput>;
}

export interface GuestPersonalWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  greeting?: Maybe<String>;
  greeting_not?: Maybe<String>;
  greeting_in?: Maybe<String[] | String>;
  greeting_not_in?: Maybe<String[] | String>;
  greeting_lt?: Maybe<String>;
  greeting_lte?: Maybe<String>;
  greeting_gt?: Maybe<String>;
  greeting_gte?: Maybe<String>;
  greeting_contains?: Maybe<String>;
  greeting_not_contains?: Maybe<String>;
  greeting_starts_with?: Maybe<String>;
  greeting_not_starts_with?: Maybe<String>;
  greeting_ends_with?: Maybe<String>;
  greeting_not_ends_with?: Maybe<String>;
  nicknames?: Maybe<String>;
  nicknames_not?: Maybe<String>;
  nicknames_in?: Maybe<String[] | String>;
  nicknames_not_in?: Maybe<String[] | String>;
  nicknames_lt?: Maybe<String>;
  nicknames_lte?: Maybe<String>;
  nicknames_gt?: Maybe<String>;
  nicknames_gte?: Maybe<String>;
  nicknames_contains?: Maybe<String>;
  nicknames_not_contains?: Maybe<String>;
  nicknames_starts_with?: Maybe<String>;
  nicknames_not_starts_with?: Maybe<String>;
  nicknames_ends_with?: Maybe<String>;
  nicknames_not_ends_with?: Maybe<String>;
  AND?: Maybe<GuestPersonalWhereInput[] | GuestPersonalWhereInput>;
  OR?: Maybe<GuestPersonalWhereInput[] | GuestPersonalWhereInput>;
  NOT?: Maybe<GuestPersonalWhereInput[] | GuestPersonalWhereInput>;
}

export interface GuestRsvpCreateInput {
  id?: Maybe<Int>;
  date?: Maybe<String>;
  responded: Boolean;
  responses?: Maybe<GuestResponseCreateManyInput>;
}

export interface GuestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GuestWhereInput>;
  AND?: Maybe<GuestSubscriptionWhereInput[] | GuestSubscriptionWhereInput>;
  OR?: Maybe<GuestSubscriptionWhereInput[] | GuestSubscriptionWhereInput>;
  NOT?: Maybe<GuestSubscriptionWhereInput[] | GuestSubscriptionWhereInput>;
}

export interface GuestResponseCreateManyInput {
  create?: Maybe<GuestResponseCreateInput[] | GuestResponseCreateInput>;
  connect?: Maybe<
    GuestResponseWhereUniqueInput[] | GuestResponseWhereUniqueInput
  >;
}

export interface GuestResponseUpdateManyMutationInput {
  attending?: Maybe<Boolean>;
  comments?: Maybe<String>;
  dietary?: Maybe<String>;
  name?: Maybe<String>;
}

export interface GuestResponseCreateInput {
  id?: Maybe<Int>;
  attending?: Maybe<Boolean>;
  comments?: Maybe<String>;
  dietary?: Maybe<String>;
  name: String;
}

export type GuestPersonalWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface GuestResponseWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  attending?: Maybe<Boolean>;
  attending_not?: Maybe<Boolean>;
  comments?: Maybe<String>;
  comments_not?: Maybe<String>;
  comments_in?: Maybe<String[] | String>;
  comments_not_in?: Maybe<String[] | String>;
  comments_lt?: Maybe<String>;
  comments_lte?: Maybe<String>;
  comments_gt?: Maybe<String>;
  comments_gte?: Maybe<String>;
  comments_contains?: Maybe<String>;
  comments_not_contains?: Maybe<String>;
  comments_starts_with?: Maybe<String>;
  comments_not_starts_with?: Maybe<String>;
  comments_ends_with?: Maybe<String>;
  comments_not_ends_with?: Maybe<String>;
  dietary?: Maybe<String>;
  dietary_not?: Maybe<String>;
  dietary_in?: Maybe<String[] | String>;
  dietary_not_in?: Maybe<String[] | String>;
  dietary_lt?: Maybe<String>;
  dietary_lte?: Maybe<String>;
  dietary_gt?: Maybe<String>;
  dietary_gte?: Maybe<String>;
  dietary_contains?: Maybe<String>;
  dietary_not_contains?: Maybe<String>;
  dietary_starts_with?: Maybe<String>;
  dietary_not_starts_with?: Maybe<String>;
  dietary_ends_with?: Maybe<String>;
  dietary_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<GuestResponseWhereInput[] | GuestResponseWhereInput>;
  OR?: Maybe<GuestResponseWhereInput[] | GuestResponseWhereInput>;
  NOT?: Maybe<GuestResponseWhereInput[] | GuestResponseWhereInput>;
}

export interface GuestResponseUpdateManyDataInput {
  attending?: Maybe<Boolean>;
  comments?: Maybe<String>;
  dietary?: Maybe<String>;
  name?: Maybe<String>;
}

export interface GuestContactUpdateOneRequiredInput {
  create?: Maybe<GuestContactCreateInput>;
  update?: Maybe<GuestContactUpdateDataInput>;
  upsert?: Maybe<GuestContactUpsertNestedInput>;
  connect?: Maybe<GuestContactWhereUniqueInput>;
}

export interface GuestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  contact?: Maybe<GuestContactWhereInput>;
  personal?: Maybe<GuestPersonalWhereInput>;
  rsvp?: Maybe<GuestRsvpWhereInput>;
  AND?: Maybe<GuestWhereInput[] | GuestWhereInput>;
  OR?: Maybe<GuestWhereInput[] | GuestWhereInput>;
  NOT?: Maybe<GuestWhereInput[] | GuestWhereInput>;
}

export interface GuestPersonalUpdateDataInput {
  greeting?: Maybe<String>;
  nicknames?: Maybe<String>;
}

export interface GuestPersonalUpdateOneRequiredInput {
  create?: Maybe<GuestPersonalCreateInput>;
  update?: Maybe<GuestPersonalUpdateDataInput>;
  upsert?: Maybe<GuestPersonalUpsertNestedInput>;
  connect?: Maybe<GuestPersonalWhereUniqueInput>;
}

export interface GuestContactUpsertNestedInput {
  update: GuestContactUpdateDataInput;
  create: GuestContactCreateInput;
}

export interface GuestContactUpdateDataInput {
  address?: Maybe<String>;
  email?: Maybe<String>;
}

export interface GuestPersonalSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GuestPersonalWhereInput>;
  AND?: Maybe<
    GuestPersonalSubscriptionWhereInput[] | GuestPersonalSubscriptionWhereInput
  >;
  OR?: Maybe<
    GuestPersonalSubscriptionWhereInput[] | GuestPersonalSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GuestPersonalSubscriptionWhereInput[] | GuestPersonalSubscriptionWhereInput
  >;
}

export interface GuestResponseUpdateManyWithWhereNestedInput {
  where: GuestResponseScalarWhereInput;
  data: GuestResponseUpdateManyDataInput;
}

export interface GuestContactUpdateInput {
  address?: Maybe<String>;
  email?: Maybe<String>;
}

export interface GuestPersonalUpdateManyMutationInput {
  greeting?: Maybe<String>;
  nicknames?: Maybe<String>;
}

export interface GuestRsvpUpdateInput {
  date?: Maybe<String>;
  responded?: Maybe<Boolean>;
  responses?: Maybe<GuestResponseUpdateManyInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface GuestRsvpPreviousValues {
  id: Int;
  date?: String;
  responded: Boolean;
}

export interface GuestRsvpPreviousValuesPromise
  extends Promise<GuestRsvpPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  date: () => Promise<String>;
  responded: () => Promise<Boolean>;
}

export interface GuestRsvpPreviousValuesSubscription
  extends Promise<AsyncIterator<GuestRsvpPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  date: () => Promise<AsyncIterator<String>>;
  responded: () => Promise<AsyncIterator<Boolean>>;
}

export interface GuestContactConnection {
  pageInfo: PageInfo;
  edges: GuestContactEdge[];
}

export interface GuestContactConnectionPromise
  extends Promise<GuestContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GuestContactEdge>>() => T;
  aggregate: <T = AggregateGuestContactPromise>() => T;
}

export interface GuestContactConnectionSubscription
  extends Promise<AsyncIterator<GuestContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuestContactEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuestContactSubscription>() => T;
}

export interface GuestResponseSubscriptionPayload {
  mutation: MutationType;
  node: GuestResponse;
  updatedFields: String[];
  previousValues: GuestResponsePreviousValues;
}

export interface GuestResponseSubscriptionPayloadPromise
  extends Promise<GuestResponseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GuestResponsePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuestResponsePreviousValuesPromise>() => T;
}

export interface GuestResponseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuestResponseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuestResponseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuestResponsePreviousValuesSubscription>() => T;
}

export interface GuestResponsePreviousValues {
  id: Int;
  attending?: Boolean;
  comments?: String;
  dietary?: String;
  name: String;
}

export interface GuestResponsePreviousValuesPromise
  extends Promise<GuestResponsePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  attending: () => Promise<Boolean>;
  comments: () => Promise<String>;
  dietary: () => Promise<String>;
  name: () => Promise<String>;
}

export interface GuestResponsePreviousValuesSubscription
  extends Promise<AsyncIterator<GuestResponsePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  attending: () => Promise<AsyncIterator<Boolean>>;
  comments: () => Promise<AsyncIterator<String>>;
  dietary: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGuest {
  count: Int;
}

export interface AggregateGuestPromise
  extends Promise<AggregateGuest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuestSubscription
  extends Promise<AsyncIterator<AggregateGuest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateGuestRsvp {
  count: Int;
}

export interface AggregateGuestRsvpPromise
  extends Promise<AggregateGuestRsvp>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuestRsvpSubscription
  extends Promise<AsyncIterator<AggregateGuestRsvp>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GuestRsvpConnection {
  pageInfo: PageInfo;
  edges: GuestRsvpEdge[];
}

export interface GuestRsvpConnectionPromise
  extends Promise<GuestRsvpConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GuestRsvpEdge>>() => T;
  aggregate: <T = AggregateGuestRsvpPromise>() => T;
}

export interface GuestRsvpConnectionSubscription
  extends Promise<AsyncIterator<GuestRsvpConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuestRsvpEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuestRsvpSubscription>() => T;
}

export interface GuestEdge {
  node: Guest;
  cursor: String;
}

export interface GuestEdgePromise extends Promise<GuestEdge>, Fragmentable {
  node: <T = GuestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GuestEdgeSubscription
  extends Promise<AsyncIterator<GuestEdge>>,
    Fragmentable {
  node: <T = GuestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGuestResponse {
  count: Int;
}

export interface AggregateGuestResponsePromise
  extends Promise<AggregateGuestResponse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuestResponseSubscription
  extends Promise<AsyncIterator<AggregateGuestResponse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GuestResponseConnection {
  pageInfo: PageInfo;
  edges: GuestResponseEdge[];
}

export interface GuestResponseConnectionPromise
  extends Promise<GuestResponseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GuestResponseEdge>>() => T;
  aggregate: <T = AggregateGuestResponsePromise>() => T;
}

export interface GuestResponseConnectionSubscription
  extends Promise<AsyncIterator<GuestResponseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuestResponseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuestResponseSubscription>() => T;
}

export interface Guest {
  id: ID_Output;
}

export interface GuestPromise extends Promise<Guest>, Fragmentable {
  id: () => Promise<ID_Output>;
  contact: <T = GuestContactPromise>() => T;
  personal: <T = GuestPersonalPromise>() => T;
  rsvp: <T = GuestRsvpPromise>() => T;
}

export interface GuestSubscription
  extends Promise<AsyncIterator<Guest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  contact: <T = GuestContactSubscription>() => T;
  personal: <T = GuestPersonalSubscription>() => T;
  rsvp: <T = GuestRsvpSubscription>() => T;
}

export interface GuestNullablePromise
  extends Promise<Guest | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  contact: <T = GuestContactPromise>() => T;
  personal: <T = GuestPersonalPromise>() => T;
  rsvp: <T = GuestRsvpPromise>() => T;
}

export interface GuestPersonalEdge {
  node: GuestPersonal;
  cursor: String;
}

export interface GuestPersonalEdgePromise
  extends Promise<GuestPersonalEdge>,
    Fragmentable {
  node: <T = GuestPersonalPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GuestPersonalEdgeSubscription
  extends Promise<AsyncIterator<GuestPersonalEdge>>,
    Fragmentable {
  node: <T = GuestPersonalSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GuestSubscriptionPayload {
  mutation: MutationType;
  node: Guest;
  updatedFields: String[];
  previousValues: GuestPreviousValues;
}

export interface GuestSubscriptionPayloadPromise
  extends Promise<GuestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GuestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuestPreviousValuesPromise>() => T;
}

export interface GuestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuestPreviousValuesSubscription>() => T;
}

export interface GuestRsvpSubscriptionPayload {
  mutation: MutationType;
  node: GuestRsvp;
  updatedFields: String[];
  previousValues: GuestRsvpPreviousValues;
}

export interface GuestRsvpSubscriptionPayloadPromise
  extends Promise<GuestRsvpSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GuestRsvpPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuestRsvpPreviousValuesPromise>() => T;
}

export interface GuestRsvpSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuestRsvpSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuestRsvpSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuestRsvpPreviousValuesSubscription>() => T;
}

export interface GuestPreviousValues {
  id: ID_Output;
}

export interface GuestPreviousValuesPromise
  extends Promise<GuestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface GuestPreviousValuesSubscription
  extends Promise<AsyncIterator<GuestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface GuestRsvp {
  id: Int;
  date?: String;
  responded: Boolean;
}

export interface GuestRsvpPromise extends Promise<GuestRsvp>, Fragmentable {
  id: () => Promise<Int>;
  date: () => Promise<String>;
  responded: () => Promise<Boolean>;
  responses: <T = FragmentableArray<GuestResponse>>(args?: {
    where?: GuestResponseWhereInput;
    orderBy?: GuestResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GuestRsvpSubscription
  extends Promise<AsyncIterator<GuestRsvp>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  date: () => Promise<AsyncIterator<String>>;
  responded: () => Promise<AsyncIterator<Boolean>>;
  responses: <T = Promise<AsyncIterator<GuestResponseSubscription>>>(args?: {
    where?: GuestResponseWhereInput;
    orderBy?: GuestResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GuestRsvpNullablePromise
  extends Promise<GuestRsvp | null>,
    Fragmentable {
  id: () => Promise<Int>;
  date: () => Promise<String>;
  responded: () => Promise<Boolean>;
  responses: <T = FragmentableArray<GuestResponse>>(args?: {
    where?: GuestResponseWhereInput;
    orderBy?: GuestResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GuestConnection {
  pageInfo: PageInfo;
  edges: GuestEdge[];
}

export interface GuestConnectionPromise
  extends Promise<GuestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GuestEdge>>() => T;
  aggregate: <T = AggregateGuestPromise>() => T;
}

export interface GuestConnectionSubscription
  extends Promise<AsyncIterator<GuestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuestSubscription>() => T;
}

export interface GuestContactEdge {
  node: GuestContact;
  cursor: String;
}

export interface GuestContactEdgePromise
  extends Promise<GuestContactEdge>,
    Fragmentable {
  node: <T = GuestContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GuestContactEdgeSubscription
  extends Promise<AsyncIterator<GuestContactEdge>>,
    Fragmentable {
  node: <T = GuestContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GuestContactSubscriptionPayload {
  mutation: MutationType;
  node: GuestContact;
  updatedFields: String[];
  previousValues: GuestContactPreviousValues;
}

export interface GuestContactSubscriptionPayloadPromise
  extends Promise<GuestContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GuestContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuestContactPreviousValuesPromise>() => T;
}

export interface GuestContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuestContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuestContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuestContactPreviousValuesSubscription>() => T;
}

export interface GuestContact {
  id: Int;
  address?: String;
  email: String;
}

export interface GuestContactPromise
  extends Promise<GuestContact>,
    Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  email: () => Promise<String>;
}

export interface GuestContactSubscription
  extends Promise<AsyncIterator<GuestContact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface GuestContactNullablePromise
  extends Promise<GuestContact | null>,
    Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  email: () => Promise<String>;
}

export interface GuestContactPreviousValues {
  id: Int;
  address?: String;
  email: String;
}

export interface GuestContactPreviousValuesPromise
  extends Promise<GuestContactPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  email: () => Promise<String>;
}

export interface GuestContactPreviousValuesSubscription
  extends Promise<AsyncIterator<GuestContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGuestPersonal {
  count: Int;
}

export interface AggregateGuestPersonalPromise
  extends Promise<AggregateGuestPersonal>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuestPersonalSubscription
  extends Promise<AsyncIterator<AggregateGuestPersonal>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GuestPersonalConnection {
  pageInfo: PageInfo;
  edges: GuestPersonalEdge[];
}

export interface GuestPersonalConnectionPromise
  extends Promise<GuestPersonalConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GuestPersonalEdge>>() => T;
  aggregate: <T = AggregateGuestPersonalPromise>() => T;
}

export interface GuestPersonalConnectionSubscription
  extends Promise<AsyncIterator<GuestPersonalConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuestPersonalEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuestPersonalSubscription>() => T;
}

export interface GuestResponse {
  id: Int;
  attending?: Boolean;
  comments?: String;
  dietary?: String;
  name: String;
}

export interface GuestResponsePromise
  extends Promise<GuestResponse>,
    Fragmentable {
  id: () => Promise<Int>;
  attending: () => Promise<Boolean>;
  comments: () => Promise<String>;
  dietary: () => Promise<String>;
  name: () => Promise<String>;
}

export interface GuestResponseSubscription
  extends Promise<AsyncIterator<GuestResponse>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  attending: () => Promise<AsyncIterator<Boolean>>;
  comments: () => Promise<AsyncIterator<String>>;
  dietary: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface GuestResponseNullablePromise
  extends Promise<GuestResponse | null>,
    Fragmentable {
  id: () => Promise<Int>;
  attending: () => Promise<Boolean>;
  comments: () => Promise<String>;
  dietary: () => Promise<String>;
  name: () => Promise<String>;
}

export interface GuestPersonalPreviousValues {
  id: Int;
  greeting?: String;
  nicknames: String;
}

export interface GuestPersonalPreviousValuesPromise
  extends Promise<GuestPersonalPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  greeting: () => Promise<String>;
  nicknames: () => Promise<String>;
}

export interface GuestPersonalPreviousValuesSubscription
  extends Promise<AsyncIterator<GuestPersonalPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  greeting: () => Promise<AsyncIterator<String>>;
  nicknames: () => Promise<AsyncIterator<String>>;
}

export interface GuestPersonalSubscriptionPayload {
  mutation: MutationType;
  node: GuestPersonal;
  updatedFields: String[];
  previousValues: GuestPersonalPreviousValues;
}

export interface GuestPersonalSubscriptionPayloadPromise
  extends Promise<GuestPersonalSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GuestPersonalPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuestPersonalPreviousValuesPromise>() => T;
}

export interface GuestPersonalSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuestPersonalSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuestPersonalSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuestPersonalPreviousValuesSubscription>() => T;
}

export interface GuestPersonal {
  id: Int;
  greeting?: String;
  nicknames: String;
}

export interface GuestPersonalPromise
  extends Promise<GuestPersonal>,
    Fragmentable {
  id: () => Promise<Int>;
  greeting: () => Promise<String>;
  nicknames: () => Promise<String>;
}

export interface GuestPersonalSubscription
  extends Promise<AsyncIterator<GuestPersonal>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  greeting: () => Promise<AsyncIterator<String>>;
  nicknames: () => Promise<AsyncIterator<String>>;
}

export interface GuestPersonalNullablePromise
  extends Promise<GuestPersonal | null>,
    Fragmentable {
  id: () => Promise<Int>;
  greeting: () => Promise<String>;
  nicknames: () => Promise<String>;
}

export interface AggregateGuestContact {
  count: Int;
}

export interface AggregateGuestContactPromise
  extends Promise<AggregateGuestContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuestContactSubscription
  extends Promise<AsyncIterator<AggregateGuestContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GuestResponseEdge {
  node: GuestResponse;
  cursor: String;
}

export interface GuestResponseEdgePromise
  extends Promise<GuestResponseEdge>,
    Fragmentable {
  node: <T = GuestResponsePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GuestResponseEdgeSubscription
  extends Promise<AsyncIterator<GuestResponseEdge>>,
    Fragmentable {
  node: <T = GuestResponseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GuestRsvpEdge {
  node: GuestRsvp;
  cursor: String;
}

export interface GuestRsvpEdgePromise
  extends Promise<GuestRsvpEdge>,
    Fragmentable {
  node: <T = GuestRsvpPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GuestRsvpEdgeSubscription
  extends Promise<AsyncIterator<GuestRsvpEdge>>,
    Fragmentable {
  node: <T = GuestRsvpSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Guest",
    embedded: false
  },
  {
    name: "GuestContact",
    embedded: false
  },
  {
    name: "GuestPersonal",
    embedded: false
  },
  {
    name: "GuestRsvp",
    embedded: false
  },
  {
    name: "GuestResponse",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
